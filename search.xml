<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Vue3.0+Vite避坑指南</title>
    <url>/2021/04/16/Vue3-0-Vite%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>Vite（法语意为 &quot;快速的&quot;，发音 /vit/，发音同 &quot;veet&quot;）是一种新型前端构建工具，能够显著提升前端开发体验。它主要由两部分组成：</p>
<p>一个开发服务器，它基于 原生 ES 模块 提供了 丰富的内建功能，如速度快到惊人的 模块热更新（HMR）。</p>
<p>一套构建指令，它使用 Rollup 打包你的代码，并且它是预配置的，可输出用于生产环境的高度优化过的静态资源。</p>
<p>Vite 意在提供开箱即用的配置，同时它的 插件 API 和 JavaScript API 带来了高度的可扩展性，并有完整的类型支持。<br />
<span id="more"></span></p>
<h2 id="vite与vuecli的区别"><a class="anchor" href="#vite与vuecli的区别">#</a> Vite 与 vue/Cli 的区别</h2>
<p>这两天听了拉勾老师的直播课，总结了当下流行的 Vite 构建工具结合 Vue 的使用，以及与 vue/Cli 的区别。<br />
<!-- more --><br />
<img data-src="/images/EvanYou.png" alt="Philadelphia's Magic Gardens. This place was so cool!" title="Evan You" /></p>
<h2 id="vite与vuecli作为构建工具的使用"><a class="anchor" href="#vite与vuecli作为构建工具的使用">#</a> vite 与 vueCli 作为构建工具的使用</h2>
<p>1.vite 与 vue2 搭配</p>
<ul>
<li>将 pack-json 特定的 vue3.x 改为 vue2.x 版本的依赖</li>
<li>在 vue.config.js 中 const {createVuePlugin} =  require ('vite-plugin-vue2')  =&gt; 借助插件<br />
备注:vite 选择 vue 框架时默认为 vue3.x</li>
</ul>
<p>2.vite 与 vueCli 的区别？</p>
<ul>
<li>vite 在 dev 环境下不经过压缩、打包、格式化、只更新改动的文件，在 Network 中可以看到还是项目中的文件内  容、文件名 (.vue 文件等等), 响应速度是 vueCli 的 7、8 倍</li>
<li>vueCli 在 dev 环境下也会经过压缩、打包、格式化、并更新所有的文件，在 Network 中可以看到的是经过编译后的文件内容、文件名 (.js 文件等等), 响应速度不及 vite</li>
</ul>
<blockquote>
<p>备注:<br />
1. vite 不支持 @引入文件 (需要换成相对路径)，vueCli 支持<br />
 2. vite 不支持 process.env (可以替换为 '/')  vueCli 支持</p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>IT 编程</title>
    <url>/2021/04/20/IT%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p>人的一切痛苦，本质上都是对自己无能的愤怒。</p>
<h2 id="王小波"><a class="anchor" href="#王小波">#</a> 王小波</h2>
<p><span id="more"></span><br />
 像电脑一样思考（要学会读代码）<a href="/programConcept/">基本理念</a>.</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>名言警句</tag>
      </tags>
  </entry>
  <entry>
    <title>git日常开发常见操作</title>
    <url>/2021/04/19/git%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>我们在进行项目开发的时候，为了更好的管理项目、追溯项目历史，我们会采用代码管理。一般常用的有 git svn 等，但是项目的开发、测试、上线往往都是有很多工作，如果没有一个合适的管理规范那会导致项目出现一下不必要的麻烦。可能各个公司有不同的管理方式，本文分享一下我们一直沿用的 GIT 分支管理规范。<br />
<span id="more"></span></p>
<p><img data-src="/images/git_01.jpg" alt="Philadelphia's Magic Gardens. This place was so cool!" title="Git Flow" /></p>
<h2 id="git-常用命令"><a class="anchor" href="#git-常用命令">#</a> Git 常用命令</h2>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">git</span> clone <span class="token operator">&lt;</span>远程URL<span class="token operator">></span> 克隆远程仓库代码<span class="token punctuation">(</span>默认拉取到的是master分支<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">git</span> checkout <span class="token operator">&lt;</span>分支<span class="token operator">></span> 切换到指定分支</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">git</span> rebase <span class="token operator">&lt;</span>分支<span class="token operator">></span> 合并指定分支的代码</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">git</span> remote <span class="token function">add</span> origin <span class="token operator">&lt;</span>远程git<span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">git</span> remote -v 查看git的链接URL</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">git</span> status 查看仓库状态</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> 提交本地修改到暂存区</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token function">git</span> commit -m <span class="token string">'提交更改的备注'</span> 将暂存区提交到本地仓库</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token function">git</span> push origin <span class="token operator">&lt;</span>分支<span class="token operator">></span> 推送本地仓库更改的分支到远程仓库的分支</pre></td></tr></table></figure><h2 id="git-flow常用的分支"><a class="anchor" href="#git-flow常用的分支">#</a> Git Flow 常用的分支</h2>
<ul>
<li>Master 分支<br />
这个分支的代码是发布到生产环境的代码，这个分支只能从其他分支合并，不能在这个分支直接修改</li>
<li>Develop 分支<br />
这个分支是我们是我们的主开发分支，包含所有要发布到下一个 Release 的代码，这个主要合并与其他分支，比如 Feature 分支</li>
<li>Feature 分支<br />
这个分支主要是用来开发一个新的功能，一旦开发完成，我们合并回 Develop 分支进入下一个 Release</li>
<li>Release 分支<br />
当你需要一个发布一个新 Release 的时候，我们基于 Develop 分支创建一个 Release 分支，完成 Release 后，我们合并到 Master 和 Develop 分支</li>
<li>Hotfix 分支<br />
当我们在 Master 发现新的 Bug 时候，我们需要创建一个 Hotfix, 完成 Hotfix 后，我们合并回 Master 和 Develop 分支，所以 Hotfix 的改动会进入下一个 Release</li>
</ul>
<h2 id="git-回滚版本"><a class="anchor" href="#git-回滚版本">#</a> Git 回滚版本</h2>
<h4 id="1命令行操作以git-bash-here工具为例"><a class="anchor" href="#1命令行操作以git-bash-here工具为例">#</a> 1. 命令行操作 (以 Git Bash Here 工具为例)</h4>
<ul>
<li>先显示提交的 log （ <code>-3</code>  为显示最近的 3 条记录）<br />
 <code>git log -3</code></li>
<li>回滚到指定的版本 （有 <code>soft</code> 、 <code>hard</code> 、 <code>mixed</code>  等参数）<br />
 <code>git reset --hard &lt;版本号&gt;</code></li>
<li>强制提交（-f 表示 force 强制提交）<br />
 <code>git push -f origin &lt;分支名&gt;</code></li>
</ul>
<h4 id="2界面版操作以tortoisegit工具为例"><a class="anchor" href="#2界面版操作以tortoisegit工具为例">#</a> 2. 界面版操作 (以 TortoiseGit 工具为例)</h4>
<p>&lt;!-- failed to push some refs to 'code.aliyun.com:1607458660/test.git' --&gt;</p>
<ul>
<li>先显示提交的 log (项目目录下右键点击 <code>TortoriseGit</code> =&gt; <code>显示日志</code> ）<br />
<img data-src="/images/Git01.png" alt="Philadelphia's Magic Gardens. This place was so cool!" /></li>
<li>选取指定版本 ( <code>右键</code> 选择 <code>重置``xx分支</code> 到此版本)<br />
<img data-src="/images/Git02.png" alt="Philadelphia's Magic Gardens. This place was so cool!" /></li>
<li>重置类型 ( <code>选择硬重置</code>  =&gt; <code>重置工作区和索引(丢弃所有本地变更)</code> , 点击 <code>确定</code> 、 <code>关闭窗口</code> )<br />
<img data-src="/images/Git03.png" alt="Philadelphia's Magic Gardens. This place was so cool!" /><br />
<img data-src="/images/Git04.png" alt="Philadelphia's Magic Gardens. This place was so cool!" /></li>
<li>重置的版本 ( <code>右键</code> 选择 <code>推送</code>  =&gt; 点击 <code>勾选</code> 已知变更)<br />
<img data-src="/images/Git05.png" alt="Philadelphia's Magic Gardens. This place was so cool!" /><br />
<img data-src="/images/Git06.png" alt="Philadelphia's Magic Gardens. This place was so cool!" /></li>
</ul>
<p><strong>在这中间可能会报 <code>error:failed to push some refs to 'code.aliyun.com:xxx.git'</code> </strong><br />
 莫慌，此时你需要做的就是拉取一下远程的变更并合并到本地，然后再次推送即可！！</p>
<p><img data-src="/images/Git08.png" alt="Philadelphia's Magic Gardens. This place was so cool!" /></p>
<p>此时就已经顺利回滚到指定版本了</p>
<h4 id="参考文章"><a class="anchor" href="#参考文章">#</a> 参考文章：</h4>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYm9vdGNzcy5jb20vcC9naXQtZ3VpZGUv">https://www.bootcss.com/p/git-guide/</span><br />
<span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL3poL3Yy">https://git-scm.com/book/zh/v2</span></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>node.js中this的指向</title>
    <url>/2021/04/20/node-js%E4%B8%ADthis%E7%9A%84%E6%8C%87%E5%90%91/</url>
    <content><![CDATA[<p>今天看到一道面试题，是一道关于 this 指向的，觉着挺有价值的，this 的指向在浏览器与 node 中的指向又有区别，而 nodejs 中的 this 又经常会变，其在不同的代码位置中代表不同的涵义，在实际开发中，大家可能也会习惯性写 var self = this 这样的代码，哈哈。本文以此探讨下 this！！</p>
<p><span id="more"></span></p>
<p><img data-src="/images/logo01.png" alt="Philadelphia's Magic Gardens. This place was so cool!" title="干就完了" /></p>
<h2 id="this-的应用场景"><a class="anchor" href="#this-的应用场景">#</a> this 的应用场景</h2>
<ul>
<li>全局作用域</li>
<li>函数作用域</li>
<li>在构造函数中</li>
</ul>
<h4 id="node-环境下的全局作用域"><a class="anchor" href="#node-环境下的全局作用域">#</a> Node 环境下的全局作用域</h4>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>console.log<span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token punctuation">;</span> //<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>this.name <span class="token operator">=</span> <span class="token string">'vittore'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>console.log<span class="token punctuation">(</span>this.name<span class="token punctuation">)</span><span class="token punctuation">;</span> //vittore</pre></td></tr><tr><td data-num="4"></td><td><pre>console.log<span class="token punctuation">(</span>global.name<span class="token punctuation">)</span><span class="token punctuation">;</span> //undefined</pre></td></tr><tr><td data-num="5"></td><td><pre>console.log<span class="token punctuation">(</span>module.exports.name<span class="token punctuation">)</span><span class="token punctuation">;</span> //vittore</pre></td></tr></table></figure><blockquote>
<p>可以看到在 Node 环境下，全局中的 this 默认是一个空对象，并且在全局中 this 与 global 对象没有任何的关系，其指向的是 module.exports</p>
</blockquote>
<h4 id="node-环境下的函数作用域"><a class="anchor" href="#node-环境下的函数作用域">#</a> Node 环境下的函数作用域</h4>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function-name function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  this.name <span class="token operator">=</span> <span class="token string">'vittore'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>fn<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>console.log<span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token punctuation">;</span> //<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>console.log<span class="token punctuation">(</span>this.name<span class="token punctuation">)</span><span class="token punctuation">;</span> //undefined</pre></td></tr><tr><td data-num="7"></td><td><pre>console.log<span class="token punctuation">(</span>global.name<span class="token punctuation">)</span><span class="token punctuation">;</span> //vittore</pre></td></tr></table></figure><blockquote>
<p>可以看到在 Node 环境下，函数中 this 指向的是 global 对象，和全局中的 this 不是同一个对象，相当于给 global 添加了一个属性，此时与全局中的 this 已经没有关系了。</p>
</blockquote>
<h4 id="node-环境下的构造函数"><a class="anchor" href="#node-环境下的构造函数">#</a> Node 环境下的构造函数</h4>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function-name function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  this.name <span class="token operator">=</span> <span class="token string">'vittore'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>var fn <span class="token operator">=</span> new Fn<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>console.log<span class="token punctuation">(</span>fn.name<span class="token punctuation">)</span><span class="token punctuation">;</span> //vittore</pre></td></tr><tr><td data-num="6"></td><td><pre>console.log<span class="token punctuation">(</span>global.name<span class="token punctuation">)</span><span class="token punctuation">;</span> //undefined</pre></td></tr></table></figure><blockquote>
<p>可以看到在 Node 环境下，构造函数中 this 指向的是它的实例，而不是 global 了。</p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>前端杂烩</title>
    <url>/2021/03/29/%E5%89%8D%E7%AB%AF%E6%9D%82%E7%83%A9/</url>
    <content><![CDATA[<p>web 集成了所有博主在开发与学习中接触过以及使用过的前端技术，以及相关的使用和介绍，例如：React、Vue2、Vue3、React-Redux、Redux、Vuex、Express、koa 以及各种技术...</p>
<p><span id="more"></span></p>
<h2 id="javascript"><a class="anchor" href="#javascript">#</a> javascript</h2>
<p>在项目开发中，数组 (Array) 是非常常见的数据结构，那什么是数据结构？</p>
<ul>
<li>数据结构是计算机存储、组织数据的方式！！！<br />
<!-- more --></li>
</ul>
<h2 id="array"><a class="anchor" href="#array">#</a> Array</h2>
<blockquote>
<p><a href="/js/">js 数组操作常用 Api</a>.</p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器环境中this的指向</title>
    <url>/2021/04/21/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%8E%AF%E5%A2%83%E4%B8%ADthis%E7%9A%84%E6%8C%87%E5%90%91/</url>
    <content><![CDATA[<p>对于一个前端初学者来说，this 的指向是一个必须要掌握的知识点，尤其是 ES6 之后的 this 指向更加变得飘忽不定，我们今天就来了解一下在 browser 中各种情况下 this 的指向。</p>
<p><span id="more"></span></p>
<h2 id="什么是-this"><a class="anchor" href="#什么是-this">#</a> 什么是 this</h2>
<p>首先，this 不是一个函数也不是某个对象，它具体指向什么东西取决于我们在哪里去调用这个 this，只有函数调用的时候才会发生 this 的绑定，主要有有以下几种情况</p>
<ul>
<li>全局作用域</li>
<li>函数作用域</li>
<li>作为对象方法和对象的属性值</li>
<li>构造函数中</li>
<li>箭头函数中</li>
<li>class 类中</li>
</ul>
<h4 id="1全局作用域"><a class="anchor" href="#1全局作用域">#</a> 1. 全局作用域</h4>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>console.log<span class="token punctuation">(</span>this <span class="token operator">==</span><span class="token operator">=</span> window<span class="token punctuation">)</span> //true</pre></td></tr></table></figure><blockquote>
<p>当我们在全局作用域中调用的时候，this 指向的是 window 对象，相当于 window 调用的这个 tihs</p>
</blockquote>
<p><img data-src="/images/browser01.png" alt="Philadelphia's Magic Gardens. This place was so cool!" title="全局作用域中this指向" /></p>
<h4 id="2函数作用域"><a class="anchor" href="#2函数作用域">#</a> 2. 函数作用域</h4>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function-name function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  console.log<span class="token punctuation">(</span>this<span class="token punctuation">)</span>  //this指向window</pre></td></tr><tr><td data-num="3"></td><td><pre> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre> test<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><blockquote>
<p>此时会发现在函数体内 this 也是指向的 window，究其缘由是因为在全局调用的 test 函数，当我们调用的时候会进行默认绑定，也就是绑定到 window 上</p>
</blockquote>
<p><img data-src="/images/browser02.png" alt="Philadelphia's Magic Gardens. This place was so cool!" title="函数作用域中this指向" /></p>
<h4 id="3作为对象方法和对象的属性值"><a class="anchor" href="#3作为对象方法和对象的属性值">#</a> 3. 作为对象方法和对象的属性值</h4>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>var Person <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>	name: <span class="token string">'vittore'</span>,</pre></td></tr><tr><td data-num="3"></td><td><pre>	that: this,</pre></td></tr><tr><td data-num="4"></td><td><pre>	age: <span class="token function-name function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>		console.log<span class="token punctuation">(</span>this<span class="token punctuation">)</span> //Person对象</pre></td></tr><tr><td data-num="6"></td><td><pre>		console.log<span class="token punctuation">(</span>this.name<span class="token punctuation">)</span> //vittore</pre></td></tr><tr><td data-num="7"></td><td><pre>	<span class="token punctuation">&#125;</span>,</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>console.log<span class="token punctuation">(</span>Person.that<span class="token punctuation">)</span> //window 类似纯函数调用</pre></td></tr><tr><td data-num="10"></td><td><pre>Person.age<span class="token punctuation">(</span><span class="token punctuation">)</span> //调用对象的age方法</pre></td></tr></table></figure><blockquote>
<p>此时会看到，当我们把 this 作为对象的某个方法去调用的时候，this 指向的是这个对象，相当于这个对象调用这个方法</p>
</blockquote>
<p><img data-src="/images/browser03.png" alt="Philadelphia's Magic Gardens. This place was so cool!" title="作为对象方法和对象的属性值中this指向" /></p>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>var Person <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>	obj: <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>		name: <span class="token string">'vittore_'</span>,</pre></td></tr><tr><td data-num="4"></td><td><pre>		sex: <span class="token function-name function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>			console.log<span class="token punctuation">(</span>this<span class="token punctuation">)</span> //obj对象</pre></td></tr><tr><td data-num="6"></td><td><pre>			console.log<span class="token punctuation">(</span>this.name<span class="token punctuation">)</span><span class="token punctuation">;</span> //vittore_</pre></td></tr><tr><td data-num="7"></td><td><pre>		<span class="token punctuation">&#125;</span>,</pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token punctuation">&#125;</span>,</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>Person.obj.sex<span class="token punctuation">(</span><span class="token punctuation">)</span> //调用penson对象中的obj对象的sex方法</pre></td></tr></table></figure><blockquote>
<p>另外，在嵌套对象中，this 指向同样是谁调用则指向谁，这时候是 obj 对象调用的。</p>
</blockquote>
<p><img data-src="/images/browser04.png" alt="Philadelphia's Magic Gardens. This place was so cool!" title="嵌套对象中this指向" /></p>
<h4 id="4构造函数中"><a class="anchor" href="#4构造函数中">#</a> 4. 构造函数中</h4>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>var name <span class="token operator">=</span> <span class="token string">'vittore'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">function</span> fun<span class="token punctuation">(</span>name, age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>	this.name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="4"></td><td><pre>	this.age <span class="token operator">=</span> age</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>var obj <span class="token operator">=</span> new fun<span class="token punctuation">(</span><span class="token string">'vittore_'</span>, <span class="token number">20</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>console.log<span class="token punctuation">(</span>obj<span class="token punctuation">)</span> //控制台打印如下</pre></td></tr></table></figure><p><img data-src="/images/browser05.png" alt="Philadelphia's Magic Gardens. This place was so cool!" title="构造函数中this指向" /></p>
<blockquote>
<p>此时，this 指向的是构造函数所创建出来的实例、即 obj 对象</p>
</blockquote>
<h4 id="5箭头函数中"><a class="anchor" href="#5箭头函数中">#</a> 5. 箭头函数中</h4>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>var obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    name:<span class="token string">'vittore'</span>,</pre></td></tr><tr><td data-num="3"></td><td><pre>    say:<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>       console.log<span class="token punctuation">(</span>this<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>obj.say<span class="token punctuation">(</span><span class="token punctuation">)</span>//控制台打印出了window</pre></td></tr></table></figure><p><img data-src="/images/browser07.png" alt="Philadelphia's Magic Gardens. This place was so cool!" title="箭头函数中this指向" /></p>
<blockquote>
<p>箭头函数没有自己的 this, 会默认继承父级执行上下文的 this，这里的上下文 this 就是 window</p>
</blockquote>
<h5 id="51-函数执行时会创建一个称为执行上下文的内部对象可理解为作用域"><a class="anchor" href="#51-函数执行时会创建一个称为执行上下文的内部对象可理解为作用域">#</a> 5.1 函数执行时会创建一个称为执行上下文的内部对象 (可理解为作用域)</h5>
<blockquote>
<p><strong>注</strong>：一个执行上下文定义了一个函数执行时的环境，而对象是没有执行上下文的。</p>
</blockquote>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>var obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>		name: <span class="token string">'vittore_'</span>,</pre></td></tr><tr><td data-num="3"></td><td><pre>		// person: <span class="token function-name function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>		// 	<span class="token builtin class-name">return</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>		// 		name: <span class="token string">'vittore'</span>,</pre></td></tr><tr><td data-num="6"></td><td><pre>		// 		say: <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>		// 			console.log<span class="token punctuation">(</span>this<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>		// 		<span class="token punctuation">&#125;</span>,</pre></td></tr><tr><td data-num="9"></td><td><pre>		// 	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>		// <span class="token punctuation">&#125;</span>,</pre></td></tr><tr><td data-num="11"></td><td><pre>		person: <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>			<span class="token builtin class-name">return</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>				name: <span class="token string">'vittore'</span>,</pre></td></tr><tr><td data-num="14"></td><td><pre>				say: <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>					console.log<span class="token punctuation">(</span>this<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>				<span class="token punctuation">&#125;</span>,</pre></td></tr><tr><td data-num="17"></td><td><pre>			<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>		<span class="token punctuation">&#125;</span>,</pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>obj.person<span class="token punctuation">(</span><span class="token punctuation">)</span>.say<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>//调用say方法这里的this指向的是obj对象，因为箭头函数没有this会向上查找，此时上级则是一个普通函数，而普通函数创建时会绑定this，如果person函数也是箭头函数的话this则指向window</pre></td></tr></table></figure><p><img data-src="/images/browser08.png" alt="Philadelphia's Magic Gardens. This place was so cool!" title="对象中普通函数中this指向" /></p>
<h4 id="6class-类中"><a class="anchor" href="#6class-类中">#</a> 6.class 类中</h4>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>class Person <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>		constructor<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>			this.name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="4"></td><td><pre>			this.say <span class="token operator">=</span> <span class="token function-name function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>				console.log<span class="token punctuation">(</span><span class="token string">'my name is '</span> + this.name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>			<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>		<span class="token function">sleep</span> <span class="token operator">=</span> <span class="token function-name function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>			console.log<span class="token punctuation">(</span>this<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>var obj <span class="token operator">=</span> new Person<span class="token punctuation">(</span><span class="token string">'vittore'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>obj.say<span class="token punctuation">(</span><span class="token punctuation">)</span> //调用obj对象的say方法 控制台打印 ‘my name is vittore’</pre></td></tr><tr><td data-num="15"></td><td><pre>obj.sleep<span class="token punctuation">(</span><span class="token punctuation">)</span> //调用obj对象的sleep方法 打印 obj对象</pre></td></tr></table></figure><p><img data-src="/images/browser06.png" alt="Philadelphia's Magic Gardens. This place was so cool!" title="class 类中this指向" /></p>
<blockquote>
<p>可以看到在 class 中的 this 都是指向这个构造函数生成的对象</p>
</blockquote>
<h2 id="更改-this-指向面试的常问点"><a class="anchor" href="#更改-this-指向面试的常问点">#</a> 更改 this 指向（面试的常问点）</h2>
<blockquote>
<p><strong>可以通过如下方式进行更改</strong></p>
</blockquote>
<ul>
<li>bind</li>
<li>call</li>
<li>apply</li>
</ul>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>var Person <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>	name: <span class="token string">'vittore'</span>,</pre></td></tr><tr><td data-num="3"></td><td><pre>	say: <span class="token keyword">function</span> <span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>		console.log<span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>my name is $<span class="token punctuation">&#123;</span>this.name<span class="token punctuation">&#125;</span>,i am $<span class="token punctuation">&#123;</span>age<span class="token punctuation">&#125;</span> years old<span class="token variable">`</span></span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="5"></td><td><pre>	<span class="token punctuation">&#125;</span>,</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>var obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	name: <span class="token string">'vittore_'</span>,</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>直接调用<br />
<strong> Person.say ()</strong></p>
<p><img data-src="/images/browser09.png" alt="Philadelphia's Magic Gardens. This place was so cool!" title="this指向更改前" /></p>
<p><strong>通过 bind ()</strong></p>
<ul>
<li>Person.say.bind (obj,'22',' 第二个参数 ',...)()<br />
<img data-src="/images/browser10.png" alt="Philadelphia's Magic Gardens. This place was so cool!" title="bind()方法更改this指向-第一种传参" /></li>
<li>Person.say.bind (obj)('22',' 第二个参数 ',...)<br />
<img data-src="/images/browser11.png" alt="Philadelphia's Magic Gardens. This place was so cool!" title="bind()方法更改this指向-第二种传参" /></li>
</ul>
<p><strong>注</strong>:bind 返回的是一个重新绑定 this 的函数，因此需要调用，两种传参方式，参数依次加在后面</p>
<p><strong>通过 call ()</strong></p>
<ul>
<li>Person.say.call (obj,'23',' 第二个参数 ')    //call 返回的是重新绑定 this 并且立即调用之后的结果，参数依次加在后面<br />
<img data-src="/images/browser12.png" alt="Philadelphia's Magic Gardens. This place was so cool!" title="call()方法更改this指向" /></li>
</ul>
<p><strong>通过 apply ()</strong></p>
<ul>
<li>Person.say.apply (obj,['24',' 第二个参数 '])  // 返回的同样是绑定了 this 并且立即调用之后的结果，参数是数组格式<br />
<img data-src="/images/browser13.png" alt="Philadelphia's Magic Gardens. This place was so cool!" title="apply()方法更改this指向" /></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>browser</tag>
      </tags>
  </entry>
  <entry>
    <title>源码阅读系列</title>
    <url>/2022/03/29/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<p>这个系列是本人参加了<span class="exturl" data-url="aHR0cHM6Ly93d3cueXVxdWUuY29tL3J1b2NodWFuMTI=">若川</span>大佬的源码共读活动，自己的阅读笔记留存。<br />
本系列会记录如何高效学习源码、如何调试源码、以及自己的一些思考、收获等。</p>
<p><span id="more"></span></p>
<ul>
<li><a href="/validate-npm-package-name-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/">validate-npm-package-name 检测 npm 包名</a></li>
<li><a href="/axios-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/">axios-utils 基础工具函数</a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>源码阅读</tag>
      </tags>
  </entry>
</search>
